#+options: ':nil *:t -:t ::t <:t H:3 \n:t ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+title: Git レポジトリの作成 ~ GitHub のリモートレポジトリとの接続
#+date: <2020-02-06 Thu>
#+author: MokkeMeguru
#+email: meguru.mokke@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.3 (Org mode 9.2.6)

* git のインストール
  まず git のインストールを行う必要があります。
  git のインストール手順は [[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git][公式のチュートリアル]] を読んで下さい。
  インストールが出来たならば、コマンドラインツールを用いて、バージョンを確認して下さい。
  #+begin_src shell
    git --version
  #+end_src
  本チュートリアルを進めるには、バージョンが2.0.0 以降である必要があります。
* アカウントの登録
  まず GitHub のアカウント登録をして下さい。登録は [[https://github.com/][公式ページ]] から行って下さい。
  このときのユーザ名とメールアドレス、パスワードを覚えていて下さい。

  次に ローカルコンピュータに GitHub の情報を記録します。(特殊な事情(サブアカウントがあるなど)がない限り、 ~global~ オプションをつけて構いません。)
  #+begin_src shell
        git config --global user.name <User Name>
        git config --global user.email <User Email>
  #+end_src
  
* ローカルレポジトリの作成
  まずローカル環境にレポジトリを作成します。
  レポジトリとは簡単にいってしまえば帳簿付きの保管庫で、過去どのような編集が行われてきたのかという記録が含まれています。
  
  以前の課題で作成した ~/tensorflow_tutorial~ へ移動して下さい。
  次にそのフォルダ(プロジェクトルート、と呼ぶこともある)でレポジトリを初期化します。
  
  #+begin_src
  cd path/to/tensorflow_tutorial (C:\Users\<...>\tensorflow_tutorial)
  git init
  #+end_src

  次に [[https://www.gitignore.io/][gitignore.io]] へアクセスし、 ~python~ を入力して下さい。すると、[[https://www.gitignore.io/api/python][このようなファイル]] が得られるので、これを  ~/tensorflow_tutorial/.gitignore~ に保存して下さい。
  これは Python コードを書いていく上で、Git で管理すべきではないファイルを管理から除外するための処理です。その他に除外したいファイルがあれば、 ~.gitignore~ へ追加します。
* 現在までの編集の記録
  おめでとうございます。ここまでで、ローカル環境にレポジトリを作成することが出来ました。
  さて、今あなたの ~/tensorflow_tutorial~ は次のような構成になっていると思われます。
  #+begin_example
  - workspace
     |- .git/
     |- .gitignore
     |- Pipfile
     |- Pipfile.lock
  #+end_example
  
  あなたは今までにコマンドラインを通じて ~Pipfile~ 、 ~Pipfile.lock~ を作成しています。
  そのためこれらの編集を登録する必要が有ります。さらに Git 管理をする際によく用いられるファイル、 ~Readme.md~ を作成する必要があります。(+Readme.org / Readme.txt でも良いですが、就活やインターンの審査では Readme.md のほうが受けが良いです+)

  記録を行うには、まずどのファイルの変更を記録するのか、を git に教える必要があります。これを ~Stage~ と呼ぶことがあります。
  
  #+begin_src shell
    git add Pipfile Pipfile.lock
  #+end_src

  めんどくさがりな人はこうすることもあります。次のコマンドは、「現在のフォルダ以下にあるものすべてを Stage してださい」という意味になります。これを行うと、現在のフォルダ以下かつ ~.gitignore~ の条件にひっかからないファイルすべてが Stage されます。
  
  #+begin_src shell
    git add . 
  #+end_src
  
  次に、 Stage したファイルの変更を帳簿に書き込んでいきます。今回は ~Pipfile~ ~Pipfile.lock~ を作成したことになります。次のコマンドは、「"create pipenv environment" という題目で Stage したファイルの変更を帳簿に書き込んでください」という意味になります。
  
  #+begin_src shell
    git commit -m "create pipenv environment"
  #+end_src

  また、次のようにして各人のエディタ (通常は ~vi~ ) を用いてより詳細に題目を書くことが出来ます。ただし、このコマンドは勝手に ~vi~ を起動してしまうという欠点があります。そのため例えば VSCode や Emacs のようなエディタ内にあるターミナルから呼び出してしまうと、操作不能に陥る可能性があります。
  
  #+begin_src shell
    git commit
  #+end_src
* リモートレポジトリの作成
  ローカルレポジトリについての操作が一段落したので、次にリモートレポジトリを作成します。
  
  まず、自分のアカウントページにアクセスして下さい。 ~https://github.com/<AccountName>~ というアドレスでアクセスできます。

  次に ~Repositories~ のタブへ遷移し、 ~New~ よりレポジトリを作成します。
  
  #+HTML: <img src="../../img/create_repository.png" width="50%">
  
  Repository name を tensorflow_tutorial 、Description を 適当に書いて下さい。 ~Public~ / ~Private~ は公開するレポジトリか非公開にするレポジトリかの選択ですが、基本的には ~Public~ で良いと思います。(ただし、大学の課題(この授業を除く)を Public にしていると除籍される可能性があります)
* レポジトリ同士の接続
  ここまでで、それぞれのレポジトリの準備が出来ました。
  接続には次のようなコマンドを用います。(おそらく GitHub 上でも確認できます)
  
  #+begin_src shell
    git remote add origin https://github.com/<User Name>/<Repository Name>
    git push -u origin master
  #+end_src

  コマンドが実行されたら、リモートレポジトリのページを確認してみましょう。
  
  #+HTML: <img src="../../img/created_repo.png" width="50%">

  はい、セキュリティエラーが出ましたね。 Tensorflow は後方互換性がないので、このようなセキュリティホールは受け入れるしかありません。諦めて下さい。

  以上で本課題は以上です。お疲れ様でした。
  
  受講生の方は、作成したレポジトリの URL をメールで送って下さい。
* 付録
** リモートレポジトリ→ローカルレポジトリ
   リモートレポジトリをローカルマシンに持ち込むことを ~clone~ と呼びます。
   
   #+begin_src shell
     git clone https://github.com/<User Name>/<Repository Name>
   #+end_src

   コマンドを実行したフォルダ下に ~<Repository Name>~ と呼ばれるフォルダが生成されたことを確認できます。この中に ~.git~ ~Pipfile~ などのファイル / フォルダが存在していることを確認して下さい。
** その他の情報
   今回は branch についての情報を教えていません。branch に関しては、 [[https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E6%A9%9F%E8%83%BD-%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%A8%E3%81%AF][公式ページ]] を一通り学習しておくと良いでしょう。(下手な本を買うより安上がりです)

